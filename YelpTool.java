import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;

import javax.swing.*;
import javax.swing.table.*;
import javax.swing.JList;

import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;

import org.json.simple.*;
import org.json.simple.parser.JSONParser;

public class YelpTool extends javax.swing.JFrame {
    
    //---------------------------------------------------------
    //                    Local variables
    //---------------------------------------------------------
	
    //JDBC Thin connection info; change as needed
    final static String connLink = "jdbc:oracle:thin:@//localhost:1521/ynguyen";
    final static String username = "scott";
    final static String password = "tiger";
	
    private String daySelected = null;
    
    private String mainCatSelected = "";
    
    private int attrAnyAll = 1;
    
    HashMap attrMap;
    HashMap cityMap;
    HashMap stateMap;
    HashMap zipMap;
    /**
     * Creates new form YelpTool
     */
    public YelpTool() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        bct1 = new javax.swing.JCheckBox();
        bct2 = new javax.swing.JCheckBox();
        bct3 = new javax.swing.JCheckBox();
        bct4 = new javax.swing.JCheckBox();
        bct5 = new javax.swing.JCheckBox();
        bct6 = new javax.swing.JCheckBox();
        bct7 = new javax.swing.JCheckBox();
        bct8 = new javax.swing.JCheckBox();
        bct9 = new javax.swing.JCheckBox();
        bct10 = new javax.swing.JCheckBox();
        bct27 = new javax.swing.JCheckBox();
        bct28 = new javax.swing.JCheckBox();
        bct11 = new javax.swing.JCheckBox();
        bct12 = new javax.swing.JCheckBox();
        bct13 = new javax.swing.JCheckBox();
        bct14 = new javax.swing.JCheckBox();
        bct16 = new javax.swing.JCheckBox();
        bct15 = new javax.swing.JCheckBox();
        bct17 = new javax.swing.JCheckBox();
        bct18 = new javax.swing.JCheckBox();
        bct19 = new javax.swing.JCheckBox();
        bct26 = new javax.swing.JCheckBox();
        bct25 = new javax.swing.JCheckBox();
        bct21 = new javax.swing.JCheckBox();
        bct20 = new javax.swing.JCheckBox();
        bct24 = new javax.swing.JCheckBox();
        bct23 = new javax.swing.JCheckBox();
        bct22 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        day1 = new javax.swing.JRadioButton();
        day2 = new javax.swing.JRadioButton();
        day3 = new javax.swing.JRadioButton();
        day4 = new javax.swing.JRadioButton();
        day5 = new javax.swing.JRadioButton();
        day6 = new javax.swing.JRadioButton();
        day7 = new javax.swing.JRadioButton();
        jComboBox1 = new javax.swing.JComboBox<>();

        buttonGroup1.add(day1);
        buttonGroup1.add(day2);
        buttonGroup1.add(day3);
        buttonGroup1.add(day4);
        buttonGroup1.add(day5);
        buttonGroup1.add(day6);
        buttonGroup1.add(day7);

        buttonGroup2.add(bct1);
        buttonGroup2.add(bct2);
        buttonGroup2.add(bct3);
        buttonGroup2.add(bct4);
        buttonGroup2.add(bct5);
        buttonGroup2.add(bct6);
        buttonGroup2.add(bct7);
        buttonGroup2.add(bct8);
        buttonGroup2.add(bct9);
        buttonGroup2.add(bct10);
        buttonGroup2.add(bct11);
        buttonGroup2.add(bct12);
        buttonGroup2.add(bct13);
        buttonGroup2.add(bct14);
        buttonGroup2.add(bct15);
        buttonGroup2.add(bct16);
        buttonGroup2.add(bct17);
        buttonGroup2.add(bct18);
        buttonGroup2.add(bct19);
        buttonGroup2.add(bct20);
        buttonGroup2.add(bct21);
        buttonGroup2.add(bct22);
        buttonGroup2.add(bct23);
        buttonGroup2.add(bct24);
        buttonGroup2.add(bct25);
        buttonGroup2.add(bct26);
        buttonGroup2.add(bct27);
        buttonGroup2.add(bct28);
        
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Yelp Tool");

        bct1.setText("Active Life");
        bct1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct1ActionPerformed(evt);
            }
        });

        bct2.setText("Arts & Entertainment");
        bct2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct2ActionPerformed(evt);
            }
        });

        bct3.setText("Automotive");
        bct3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct3ActionPerformed(evt);
            }
        });

        bct4.setText("Car Rental");
        bct4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct4ActionPerformed(evt);
            }
        });

        bct5.setText("Cafes");
        bct5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct5ActionPerformed(evt);
            }
        });

        bct6.setText("Beauty & Spas");
        bct6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct6ActionPerformed(evt);
            }
        });

        bct7.setText("Convenience Stores");
        bct7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct7ActionPerformed(evt);
            }
        });
        
        bct8.setText("Dentists");
        bct8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct8ActionPerformed(evt);
            }
        });
        
        bct9.setText("Doctors");
        bct9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct9ActionPerformed(evt);
            }
        });
        
        bct10.setText("Drugstores");
        bct10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct10ActionPerformed(evt);
            }
        });


        bct11.setText("Department Stores");
        bct11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct11ActionPerformed(evt);
            }
        });

        bct12.setText("Education");
        bct12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct12ActionPerformed(evt);
            }
        });
        
        bct13.setText("Event Planning & Services");
        bct13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct13ActionPerformed(evt);
            }
        });
        
        bct14.setText("Flowers & Gifts");
        bct14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct14ActionPerformed(evt);
            }
        });
        
        bct15.setText("Food");
        bct15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct15ActionPerformed(evt);
            }
        });
        
        bct16.setText("Health & Medical");
        bct16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct16ActionPerformed(evt);
            }
        });
        
        bct17.setText("Home Services");
        bct17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct17ActionPerformed(evt);
            }
        });
        
        bct18.setText("Home & Garden");
        bct18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct18ActionPerformed(evt);
            }
        });
        
        bct19.setText("Hospitals");
        bct19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct19ActionPerformed(evt);
            }
        });
        
        bct20.setText("Hotels & Travel");
        bct20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct20ActionPerformed(evt);
            }
        });
        
        bct21.setText("Hardware Stores");
        bct21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct21ActionPerformed(evt);
            }
        });
        
        bct22.setText("Grocery");
        bct22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct22ActionPerformed(evt);
            }
        });
        
        bct23.setText("Medical Centers");
        bct23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct23ActionPerformed(evt);
            }
        });
        
        bct24.setText("Nurseries & Gardening");
        bct24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct24ActionPerformed(evt);
            }
        });
        
        bct25.setText("Nightlife");
        bct25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct25ActionPerformed(evt);
            }
        });
        
        bct26.setText("Restaurants");
        bct26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct26ActionPerformed(evt);
            }
        });
        
        bct27.setText("Shopping");
        bct27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct27ActionPerformed(evt);
            }
        });
        
        bct28.setText("Transportation");
        bct28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bct28ActionPerformed(evt);
            }
        });

        
        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(bct1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct10, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct27, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct28, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct11, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct12, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct13, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct14, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct16, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct15, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct17, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct18, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct19, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct26, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct25, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct21, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct20, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct24, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct23, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bct22, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(bct1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct5)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct6)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct7)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct8)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct9)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct10)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct11)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct12)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct13)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct14)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct15)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct16)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct17)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct18)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct19)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct20)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct21)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct22)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct23)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct24)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct25)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct26)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct27)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bct28))
        );

        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("I'm feeling lucky!");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel3.setLayout(new java.awt.BorderLayout());

        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        
        jScrollPane2.setViewportView(jList1);

        jPanel3.add(jScrollPane2, java.awt.BorderLayout.LINE_START);

        jScrollPane3.setViewportView(jList2);
        
        jList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList2ValueChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane3)
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Business ID", "Business Name", "City", "State", "Rating"
            }
        ) {
            Class[] types = new Class [] {
            		java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getSelectionModel().addListSelectionListener( new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jTable1ValueChanged(evt);
            }
        });
        jTable1.removeColumn(jTable1.getColumnModel().getColumn(0));

        jLabel1.setText("Day Open:");

        day1.setText("Monday");
        day1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                day1ActionPerformed(evt);
            }
        });

        day2.setText("Tuesday");
        day2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                day2ActionPerformed(evt);
            }
        });

        day3.setText("Wednesday");
        day3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                day3ActionPerformed(evt);
            }
        });

        day4.setText("Thursday");
        day4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                day4ActionPerformed(evt);
            }
        });

        day5.setText("Friday");
        day5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                day5ActionPerformed(evt);
            }
        });
        
        day6.setText("Saturday");
        day6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                day6ActionPerformed(evt);
            }
        });
        
        day7.setText("Sunday");
        day7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                day7ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any Attribute", "All Attributes" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
        	public void actionPerformed(java.awt.event.ActionEvent evt) {
        		jComboBox1ActionPerformed(evt);
        	}
        });
        
        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 101, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(day1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(day2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(day3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(day4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(day5)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(day6)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(day7)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(136, 136, 136)
                        .add(jButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 121, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 118, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(19, 19, 19))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 619, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 78, Short.MAX_VALUE))
                    .add(jScrollPane1)
                    .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(day1)
                            .add(day2)
                            .add(day3)
                            .add(day4)
                            .add(day5)
                            .add(day6)
                            .add(day7)
                            .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(5, 5, 5))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        System.exit(0);
    }
    
	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
		if (!(attrMap == null)) {
			if (!attrMap.isEmpty()) {
				int dataSetSize = attrMap.size();
				Random rand = new Random();
				if (dataSetSize > 3) {
					int suggestion1 = rand.nextInt(dataSetSize);
					int suggestion2 = rand.nextInt(dataSetSize);
					while (suggestion2 == suggestion1) {
						suggestion2 = rand.nextInt(dataSetSize);
					}
					int suggestion3 = rand.nextInt(dataSetSize);
					while (suggestion3 == suggestion2
							|| suggestion3 == suggestion1) {
						suggestion3 = rand.nextInt(dataSetSize);
					}
					// System.out.println(suggestion1);
					// System.out.println(suggestion2);
					// System.out.println(suggestion3);
					ArrayList<String[]> bssnArray = new ArrayList<String[]>();
					Set hashSet = attrMap.entrySet();
					Iterator hashSetIterator = hashSet.iterator();
					while (hashSetIterator.hasNext()) {
						Map.Entry next = (Map.Entry) hashSetIterator.next();
						String[] bssnInfo = (String[]) next.getKey();
						bssnArray.add(bssnInfo);
					}
					String[] bssnInfo1 = bssnArray.get(suggestion1);
					String[] bssnInfo2 = bssnArray.get(suggestion2);
					String[] bssnInfo3 = bssnArray.get(suggestion3);
					DefaultTableModel model = (DefaultTableModel) jTable1
							.getModel();
					model.setRowCount(0);
					jTable1.removeAll();
					model.addRow(new Object[] { bssnInfo1[0], bssnInfo1[1],
							bssnInfo1[2], bssnInfo1[3],
							Double.parseDouble(bssnInfo1[4]) });
					model.addRow(new Object[] { bssnInfo2[0], bssnInfo2[1],
							bssnInfo2[2], bssnInfo2[3],
							Double.parseDouble(bssnInfo2[4]) });
					model.addRow(new Object[] { bssnInfo3[0], bssnInfo3[1],
							bssnInfo3[2], bssnInfo3[3],
							Double.parseDouble(bssnInfo3[4]) });
					jTable1.setModel(model);
				} else {
					DefaultTableModel model = (DefaultTableModel) jTable1
							.getModel();
					model.setRowCount(0);
					jTable1.removeAll();
					Set hashSet = attrMap.entrySet();
					Iterator hashSetIterator = hashSet.iterator();
					while (hashSetIterator.hasNext()) {
						Map.Entry next = (Map.Entry) hashSetIterator.next();
						String[] bssnInfo = (String[]) next.getKey();
						model.addRow(new Object[] { bssnInfo[0], bssnInfo[1],
								bssnInfo[2], bssnInfo[3],
								Double.parseDouble(bssnInfo[4]) });
					}
					jTable1.setModel(model);
				}
			}
		}
	}

	private void bct1ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        if (bct1.isSelected())
        {
        	mainCatSelected = "bct1";
        	try
	    	{
    			Class.forName("oracle.jdbc.OracleDriver");
    		    Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
    }                                                       

    private void bct2ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        if (bct2.isSelected())
        {
        	mainCatSelected = "bct2";
        	try
	    	{
    			Class.forName("oracle.jdbc.OracleDriver");
    		    Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
    }                                    

    private void bct3ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        if (bct3.isSelected())
        {
        	mainCatSelected = "bct3";
        	try
	    	{
		    	Class.forName("oracle.jdbc.OracleDriver");
		        Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
    }                                    

    private void bct4ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        if (bct4.isSelected())
        {
        	mainCatSelected = "bct4";
        	try
	    	{
    			Class.forName("oracle.jdbc.OracleDriver");
    		    Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
    } 
    
    private void bct5ActionPerformed(ActionEvent evt) {
        if (bct5.isSelected())
        {
        	mainCatSelected = "bct5";
        	try
	    	{
    			Class.forName("oracle.jdbc.OracleDriver");
    		    Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
	}

    private void bct6ActionPerformed(ActionEvent evt) {
        if (bct6.isSelected())
        {
        	mainCatSelected = "bct6";
        	try
	    	{
    			Class.forName("oracle.jdbc.OracleDriver");
    		    Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
	}
    
    private void bct7ActionPerformed(ActionEvent evt) {
        if (bct7.isSelected())
        {
        	mainCatSelected = "bct7";
        	try
	    	{
    			Class.forName("oracle.jdbc.OracleDriver");
    		    Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
	}
    
    private void bct8ActionPerformed(ActionEvent evt) {
        if (bct8.isSelected())
        {
        	mainCatSelected = "bct8";
        	try
	    	{
    			Class.forName("oracle.jdbc.OracleDriver");
    		    Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
	}
    
    private void bct9ActionPerformed(ActionEvent evt) {
        if (bct9.isSelected())
        {
        	mainCatSelected = "bct9";
        	try
	    	{
    			Class.forName("oracle.jdbc.OracleDriver");
    		    Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
	}
    
    private void bct10ActionPerformed(ActionEvent evt) {
        if (bct10.isSelected())
        {
        	mainCatSelected = "bct10";
        	try
	    	{
    			Class.forName("oracle.jdbc.OracleDriver");
    		    Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
	}
    
    private void bct11ActionPerformed(ActionEvent evt) {
        if (bct11.isSelected())
        {
        	mainCatSelected = "bct11";
        	try
	    	{
    			Class.forName("oracle.jdbc.OracleDriver");
    		    Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
	}
    
    private void bct12ActionPerformed(ActionEvent evt) {
        if (bct12.isSelected())
        {
        	mainCatSelected = "bct12";
        	try
	    	{
    			Class.forName("oracle.jdbc.OracleDriver");
    		    Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
	}
    
    private void bct13ActionPerformed(ActionEvent evt) {
        if (bct13.isSelected())
        {
        	mainCatSelected = "bct13";
        	try
	    	{
    			Class.forName("oracle.jdbc.OracleDriver");
    		    Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
	}
    
    private void bct14ActionPerformed(ActionEvent evt) {
        if (bct14.isSelected())
        {
        	mainCatSelected = "bct14";
        	try
	    	{
    			Class.forName("oracle.jdbc.OracleDriver");
    		    Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
	}
    
    private void bct15ActionPerformed(ActionEvent evt) {
        if (bct15.isSelected())
        {
        	mainCatSelected = "bct15";
        	try
	    	{
    			Class.forName("oracle.jdbc.OracleDriver");
    		    Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
	}
    
    private void bct16ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        if (bct16.isSelected())
        {
        	mainCatSelected = "bct16";
        	try
	    	{
		    	Class.forName("oracle.jdbc.OracleDriver");
		        Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
    }                                    
    
    private void bct17ActionPerformed(ActionEvent evt) {
        if (bct17.isSelected())
        {
        	mainCatSelected = "bct17";
        	try
	    	{
    			Class.forName("oracle.jdbc.OracleDriver");
    		    Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
	}
    
    private void bct18ActionPerformed(ActionEvent evt) {
        if (bct18.isSelected())
        {
        	mainCatSelected = "bct18";
        	try
	    	{
    			Class.forName("oracle.jdbc.OracleDriver");
    		    Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
	}
    
    private void bct19ActionPerformed(ActionEvent evt) {
        if (bct19.isSelected())
        {
        	mainCatSelected = "bct19";
        	try
	    	{
    			Class.forName("oracle.jdbc.OracleDriver");
    		    Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
	}
    
    private void bct20ActionPerformed(ActionEvent evt) {
        if (bct20.isSelected())
        {
        	mainCatSelected = "bct20";
        	try
	    	{
    			Class.forName("oracle.jdbc.OracleDriver");
    		    Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
	}
    
    private void bct21ActionPerformed(ActionEvent evt) {
        if (bct21.isSelected())
        {
        	mainCatSelected = "bct21";
        	try
	    	{
    			Class.forName("oracle.jdbc.OracleDriver");
    		    Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
	}
    
    private void bct22ActionPerformed(ActionEvent evt) {
        if (bct22.isSelected())
        {
        	mainCatSelected = "bct22";
        	try
	    	{
    			Class.forName("oracle.jdbc.OracleDriver");
    		    Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
	}
    
    private void bct23ActionPerformed(ActionEvent evt) {
        if (bct23.isSelected())
        {
        	mainCatSelected = "bct23";
        	try
	    	{
    			Class.forName("oracle.jdbc.OracleDriver");
    		    Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
	}
    
    private void bct24ActionPerformed(ActionEvent evt) {
        if (bct24.isSelected())
        {
        	mainCatSelected = "bct24";
        	try
	    	{
    			Class.forName("oracle.jdbc.OracleDriver");
    		    Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
	}
    
    private void bct25ActionPerformed(ActionEvent evt) {
        if (bct25.isSelected())
        {
        	mainCatSelected = "bct25";
        	try
	    	{
    			Class.forName("oracle.jdbc.OracleDriver");
    		    Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
	}
    
    private void bct26ActionPerformed(ActionEvent evt) {
        if (bct26.isSelected())
        {
        	mainCatSelected = "bct26";
        	try
	    	{
    			Class.forName("oracle.jdbc.OracleDriver");
    		    Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
	}
    
    private void bct27ActionPerformed(ActionEvent evt) {
        if (bct27.isSelected())
        {
        	mainCatSelected = "bct27";
        	try
	    	{
    			Class.forName("oracle.jdbc.OracleDriver");
    		    Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
	}
    
    private void bct28ActionPerformed(ActionEvent evt) {
        if (bct28.isSelected())
        {
        	mainCatSelected = "bct28";
        	try
	    	{
    			Class.forName("oracle.jdbc.OracleDriver");
    		    Connection myConn = DriverManager.getConnection( connLink, username, password );
				Statement statement = myConn.createStatement();
				String query = "Select distinct b.sub_category "
						+ "from business_sub_category b "
						+ "where b.main_category = '" + mainCatSelected + "'";
				ResultSet resultSet = statement.executeQuery(query);
				jList1.removeAll();
				DefaultListModel listModel = new DefaultListModel();
				listModel.addElement("(none)");
				while (resultSet.next())
				{
					String subCat = resultSet.getString("sub_category");
					listModel.addElement(subCat);
				}
				jList1.setModel(listModel);
				statement.close(); myConn.close();
	    	}
        	catch (Exception ex) {System.out.println("Something went wrong :(");}
        }
	}
    
    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {                                    
        if (!evt.getValueIsAdjusting()) {//This line prevents double events
        	//erase previous values of jTable1
        	DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            
        	jTable1.removeAll();
            String selected = jList1.getSelectedValue();
            if (selected != null)
            {
            	try
        		{
            		Class.forName("oracle.jdbc.OracleDriver");
            	    Connection myConn = DriverManager.getConnection( connLink, username, password );
    				Statement statement = myConn.createStatement();
    				String query = "";
    				//check if day open condition is selected or not
    				if (daySelected != null)
    				{
    					//build common part of the query
    					query = "Select distinct * "
	            				+ "from business_sub_category s "
	            				+ "inner join yelp_businesses b on b.business_id = s.business_id "
	            				+ "inner join days_open d on d.business_id = s.business_id "
	            				+ "where s.main_category = '" + mainCatSelected + "'";
    					//check if subcategory is selected or not
		            	if (selected == "(none)")
		            	{
		            		query = query + "and s.sub_category is null ";
		            	}
		            	else
		            	{
			    			query = query + "and s.sub_category = '" + selected + "'";
		            	}
		            	//complete query by checking the day open
		            	query = query + "and d." + daySelected + " = 'y'";
    				}
    				else
    				{
    					//build common part of the query
    					query = "Select distinct * "
	            				+ "from business_sub_category s "
	            				+ "inner join yelp_businesses b on b.business_id = s.business_id "
	            				+ "where s.main_category = '" + mainCatSelected + "'";
    					//check if subcategory is selected or not
    					if (selected == "(none)")
		            	{
		            		query = query + "and s.sub_category is null ";
		            	}
		            	else
		            	{
			    			query = query + "and s.sub_category = '" + selected + "'";
		            	}
    				}
    				
		    		//System.out.println( query );
		    		ResultSet resultSet = statement.executeQuery(query);
		    		//System.out.println( resultSet.toString() );
		    		attrMap = new HashMap();
		    		cityMap = new HashMap();
		    		stateMap = new HashMap();
		    		zipMap = new HashMap();
		    		//System.out.println("----------------------------------------------------------------");
		    		while (resultSet.next())
		    		{
		    			String resultBssnId = resultSet.getString("business_id");
		    			String resultBssnName = resultSet.getString("business_name");
		    			String resultBssnCity = resultSet.getString("business_city");
		    			String resultBssnState = resultSet.getString("business_state");
		    			String resultBssnRating = Double.toString(resultSet.getDouble("business_rating"));
		    			String resultBssnZip = resultSet.getString("business_zip");
		    			String [] resultBssnInfo = { resultBssnId, resultBssnName, resultBssnCity, resultBssnState, resultBssnRating, resultBssnZip };
		    			//System.out.println(resultBssnId);
		    			//System.out.println(resultSet.getString("attributes"));
		    			
		    			//populate attributes list
		    			JSONParser parser = new JSONParser();
                        JSONObject jsonAttr = (JSONObject) parser.parse(resultSet.getString("attributes"));
                        //boolean wcAcc = (boolean)jsonAttr.get("Good for Kids");
                        //System.out.println(wcAcc);
                        attrMap.put(resultBssnInfo, jsonAttr);
                        cityMap.put(resultBssnInfo, resultBssnCity);
                        stateMap.put(resultBssnInfo, resultBssnState);
                        zipMap.put(resultBssnInfo, resultBssnZip);
		    		}
		    		Set attrSet = attrMap.entrySet();
		    		Iterator attrIt = attrSet.iterator();
		    		
		    		jList2.removeAll();
		    		ArrayList<String> allAttr = new ArrayList<String>();
		    		DefaultListModel listModel = new DefaultListModel();
		    		while (attrIt.hasNext())
		    		{
		    			Map.Entry next = (Map.Entry)attrIt.next();
		    			//System.out.println(next);
		    			//System.out.println(next.getKey());
		    			JSONObject jsonAttr = (JSONObject) next.getValue();
		    			Set attr = jsonAttr.entrySet();
		    			Iterator attrIter = attr.iterator();
		    			
		    			while (attrIter.hasNext())
		    			{
		    				Map.Entry nextAttr = (Map.Entry) attrIter.next();
		    				//Class c = nextAttr.getValue().getClass();
		    				//System.out.println(c);
		    				/*if (!listModel.contains(nextAttr.getKey()))
		    				{
		    					listModel.addElement(nextAttr.getKey());
		    				}*/
		    				
		    				//System.out.println(nextAttr.getValue().getClass());
		    				if (nextAttr.getValue() instanceof org.json.simple.JSONObject)
		    				{
		    					//System.out.print(nextAttr.getKey());
		    					//System.out.println(nextAttr.getValue());
		    					JSONObject nestedAttr = (JSONObject) nextAttr.getValue();
		    					Set nestedAttrSet = nestedAttr.entrySet();
		    					Iterator nestedAttrIter = nestedAttrSet.iterator();
		    					while (nestedAttrIter.hasNext())
		    					{
		    						Map.Entry nextNestedAttr = (Map.Entry) nestedAttrIter.next();
		    						String attrString = nextAttr.getKey().toString() + "_" 
		    								+ nextNestedAttr.getKey().toString() + "_"
		    								+ nextNestedAttr.getValue().toString();
		    						//System.out.println( attrString );
		    						if ( !allAttr.contains(attrString) )
			    					{
			    						allAttr.add(attrString);
			    						//System.out.println(attrString);
			    						listModel.addElement(attrString);
			    					}
		    					}
		    				}
		    				else
		    				{
		    					String attrString = nextAttr.getKey().toString() + "_" + nextAttr.getValue().toString();
		    					if ( !allAttr.contains(attrString) )
		    					{
		    						allAttr.add(attrString);
		    						//System.out.println(attrString);
		    						listModel.addElement(attrString);
		    					}
		    				}
		    			}
		    		}
		    		
		    		ArrayList<String> allCity = new ArrayList<String>();
		    		Set citySet = cityMap.entrySet();
		    		Iterator cityIter = citySet.iterator();
		    		while (cityIter.hasNext())
		    		{
		    			Map.Entry nextCity = (Map.Entry) cityIter.next();
		    			String cityString = "City_" + nextCity.getValue();
		    			if ( !(allCity.contains(cityString)) )
		    			{
		    				listModel.addElement(cityString);
		    				allCity.add(cityString);
		    			}
		    		}
		    		
		    		ArrayList<String> allState = new ArrayList<String>();
		    		Set stateSet = stateMap.entrySet();
		    		Iterator stateIter = stateSet.iterator();
		    		while (stateIter.hasNext())
		    		{
		    			Map.Entry nextState = (Map.Entry) stateIter.next();
		    			String stateString = "State_" + nextState.getValue();
		    			if ( !(allState.contains(stateString)) )
		    			{
		    				listModel.addElement(stateString);
		    				allState.add(stateString);
		    			}
		    		}
		    		
		    		ArrayList<String> allZip = new ArrayList<String>();
		    		Set zipSet = zipMap.entrySet();
		    		Iterator zipIter = zipSet.iterator();
		    		while (zipIter.hasNext())
		    		{
		    			Map.Entry nextZip = (Map.Entry) zipIter.next();
		    			String zipString = "Zipcode_" + nextZip.getValue();
		    			if ( !(allZip.contains(zipString)) )
		    			{
		    				listModel.addElement(zipString);
		    				allZip.add(zipString);
		    			}
		    		}
		    		
                    jList2.setModel(listModel);
		    		
        		}
            	catch (SQLException sqlEx)
            	{
            		System.out.println( sqlEx.getMessage() );
            	}
            	catch (Exception ex)
            	{
            		System.out.println( ex.getMessage() );
            	}
            }
        }
    }                                   

    private void jList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {                                    
        if (!evt.getValueIsAdjusting()) {//This line prevents double events
            
        	DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            //clear table before displaying search results
            model.setRowCount(0);
            
        	List<String> desiredAttrs = (List<String>) jList2.getSelectedValuesList();
        	
        	//System.out.println( desiredAttr );
	        
	        //OR condition for attributes selected
	        if ( attrAnyAll == 1)
	        {
	        	//clear table before displaying search results
	            model.setRowCount(0);
	        	//keep track of businesses already in the list
	        	ArrayList<String> bssnAlreadyInList = new ArrayList<String> ();
	        	for (String desiredAttr : desiredAttrs)
	        	{
		        	Set hashSet = attrMap.entrySet();
		        	Iterator hashSetIterator = hashSet.iterator();
		        	while (hashSetIterator.hasNext())
		        	{
		        		Map.Entry nextBssnAttr = (Map.Entry) hashSetIterator.next();
		        		JSONObject attrList = (JSONObject) nextBssnAttr.getValue();
		        		//example, for "Accepts Credit Cards_true", attrName = "Accepts Credit Cards" & attrValue = "true"
		        		String attrName = desiredAttr.substring(0, desiredAttr.indexOf('_'));
		        		String attrValue = desiredAttr.substring(desiredAttr.indexOf('_') + 1, desiredAttr.length());
		        		//System.out.println(attrName);
		        		//System.out.println(attrValue);
		        		//System.out.println(attrList.containsKey(attrName));
		        		//check if attribute "State" is selected
		        		if ( attrName.equals("State") )
		        		{
		        			String[] stateCheckBssn = (String []) nextBssnAttr.getKey();
		        			if ( stateCheckBssn[3].equals(attrValue) 
		        					|| stateCheckBssn[3].substring(0, stateCheckBssn[3].length()).equals(attrValue) )
		        			{
	        					if ( !bssnAlreadyInList.contains(stateCheckBssn[0]))
	        					{
	        						model.addRow(new Object[]{ 
	        								stateCheckBssn[0], 
	        								stateCheckBssn[1], 
	        								stateCheckBssn[2], 
	        								stateCheckBssn[3], 
	        								Double.parseDouble(stateCheckBssn[4])});
	        						bssnAlreadyInList.add(stateCheckBssn[0]);
	        					}
		        			}
		        		}
		        		//check if attribute "City" is selected
		        		if ( attrName.equals("City") )
		        		{
		        			String[] cityCheckBssn = (String []) nextBssnAttr.getKey();
		        			if ( cityCheckBssn[2].equals(attrValue) )
		        			{
	        					if ( !bssnAlreadyInList.contains(cityCheckBssn[0]))
	        					{
	        						model.addRow(new Object[]{ 
	        								cityCheckBssn[0], 
	        								cityCheckBssn[1], 
	        								cityCheckBssn[2], 
	        								cityCheckBssn[3], 
	        								Double.parseDouble(cityCheckBssn[4])});
	        						bssnAlreadyInList.add(cityCheckBssn[0]);
	        					}
		        			}
		        		}
		        		//check if attribute "Zipcode" is selected
		        		if ( attrName.equals("Zipcode") )
		        		{
		        			String[] zipCheckBssn = (String []) nextBssnAttr.getKey();
		        			if ( zipCheckBssn[5].equals(attrValue) )
		        			{
	        					if ( !bssnAlreadyInList.contains(zipCheckBssn[0]))
	        					{
	        						model.addRow(new Object[]{ 
	        								zipCheckBssn[0], 
	        								zipCheckBssn[1], 
	        								zipCheckBssn[2], 
	        								zipCheckBssn[3], 
	        								Double.parseDouble(zipCheckBssn[4])});
	        						bssnAlreadyInList.add(zipCheckBssn[0]);
	        					}
		        			}
		        		}
		        		//check if any attribute besides "State", "City", or "Zipcode" is selected
		        		if ( attrList.containsKey(attrName) )
		        		{
		        			//check if attribute value is string
		        			if ( attrList.get(attrName) instanceof java.lang.Boolean )
		        			{
		        				if (attrList.get(attrName).toString().equals(attrValue))
		        				{
		        					String[] resultBssn = (String []) nextBssnAttr.getKey();
		        					//System.out.println(nextBssnAttr.getKey());
		        					if ( !bssnAlreadyInList.contains(resultBssn[0]))
		        					{
		        						model.addRow(new Object[]{ 
		        								resultBssn[0], 
		        								resultBssn[1], 
		        								resultBssn[2], 
		        								resultBssn[3], 
		        								Double.parseDouble(resultBssn[4])});
		        						bssnAlreadyInList.add(resultBssn[0]);
		        					}
		        				}
		        			}
		        			//check if attribute value is long
		        			if ( attrList.get(attrName) instanceof java.lang.Long )
		        			{
		        				if ( (Long)attrList.get(attrName) == Long.parseLong(attrValue))
		        				{
		        					//System.out.println(nextBssnAttr.getKey());
		        					String[] resultBssn = (String []) nextBssnAttr.getKey();
		        					if ( !bssnAlreadyInList.contains(resultBssn[0]))
		        					{
		        						model.addRow(new Object[]{ 
		        								resultBssn[0], 
		        								resultBssn[1], 
		        								resultBssn[2], 
		        								resultBssn[3], 
		        								Double.parseDouble(resultBssn[4])});
		        						bssnAlreadyInList.add(resultBssn[0]);
		        					}		        				
		        				}
		        			}
		        			//check if attribute value is string
		        			if ( attrList.get(attrName) instanceof java.lang.String )
		        			{
		        				if ( attrList.get(attrName).equals(attrValue))
		        				{
		        					//System.out.println(nextBssnAttr.getKey());
		        					String[] resultBssn = (String []) nextBssnAttr.getKey();
		        					if ( !bssnAlreadyInList.contains(resultBssn[0]))
		        					{
		        						model.addRow(new Object[]{ 
		        								resultBssn[0], 
		        								resultBssn[1], 
		        								resultBssn[2], 
		        								resultBssn[3], 
		        								Double.parseDouble(resultBssn[4])});
		        						bssnAlreadyInList.add(resultBssn[0]);
		        					}		        				
		        				}
		        			}
		        			//check if attribute value is JSONObject
		        			if ( attrList.get(attrName) instanceof org.json.simple.JSONObject )
		        			{
		        				JSONObject attrSub = (JSONObject) attrList.get(attrName);
		        				String attrValue1 = attrValue.substring(0, attrValue.indexOf('_'));
		        				String attrValue2 = attrValue.substring(attrValue.indexOf('_') + 1, attrValue.length());
		        				if (attrSub.containsKey(attrValue1) && attrSub.get(attrValue1).toString().equals(attrValue2))
		        				{
		        					String[] resultBssn = (String []) nextBssnAttr.getKey();
		        					if ( !bssnAlreadyInList.contains(resultBssn[0]))
		        					{
		        						model.addRow(new Object[]{ 
		        								resultBssn[0], 
		        								resultBssn[1], 
		        								resultBssn[2], 
		        								resultBssn[3], 
		        								Double.parseDouble(resultBssn[4])});
		        						bssnAlreadyInList.add(resultBssn[0]);
		        					}		        				
		        				}
		        			}
		        		}
		        	}
	        	}
	        }
	        //AND condition for attributes selected
	        else if ( attrAnyAll == 2 )
	        {
	        	//clear table before displaying search results
	            model.setRowCount(0);
        		Set hashSet = attrMap.entrySet();
	        	Iterator hashSetIterator = hashSet.iterator();
	        	while (hashSetIterator.hasNext())
	        	{
	        		Map.Entry nextBssnAttr = (Map.Entry) hashSetIterator.next();
	        		int numAttrNotMet = desiredAttrs.size();
		        	for (String desiredAttr : desiredAttrs)
		        	{
		        		
		        		JSONObject attrList = (JSONObject) nextBssnAttr.getValue();
		        		//example, for "Accepts Credit Cards_true", attrName = "Accepts Credit Cards" & attrValue = "true"
		        		String attrName = desiredAttr.substring(0, desiredAttr.indexOf('_'));
		        		String attrValue = desiredAttr.substring(desiredAttr.indexOf('_') + 1, desiredAttr.length());
		        		if ( attrName.equals("State") )
		        		{
		        			String[] stateCheckBssn = (String []) nextBssnAttr.getKey();
		        			if ( !(stateCheckBssn == null) )
		        			{
			        			if ( stateCheckBssn[3].equals(attrValue) 
			        					|| stateCheckBssn[3].substring(0, stateCheckBssn[3].length()).equals(attrValue) )
			        			{
		        					--numAttrNotMet;
			        			}
		        			}
		        		}
		        		//check if attribute "City" is selected
		        		if ( attrName.equals("City") )
		        		{
		        			String[] cityCheckBssn = (String []) nextBssnAttr.getKey();
		        			if ( !(cityCheckBssn == null) )
		        			{
			        			if ( cityCheckBssn[2].equals(attrValue) )
			        			{
		        					--numAttrNotMet;
			        			}
		        			}
		        		}
		        		//check if attribute "Zipcode" is selected
		        		if ( attrName.equals("Zipcode") )
		        		{
		        			String[] zipCheckBssn = (String []) nextBssnAttr.getKey();
		        			if ( !(zipCheckBssn == null) )
		        			{
			        			if ( zipCheckBssn[5].equals(attrValue) )
			        			{
		        					--numAttrNotMet;
			        			}
		        			}
		        		}
		        		if ( attrList.containsKey(attrName) )
		        		{
		        			//check if attribute value is string
		        			if ( attrList.get(attrName) instanceof java.lang.Boolean )
		        			{
		        				if (attrList.get(attrName).toString().equals(attrValue))
		        				{
		        					//decrement numAttrNotMet by 1
		        					--numAttrNotMet;
		        				}
		        			}
		        			//check if attribute value is long
		        			if ( attrList.get(attrName) instanceof java.lang.Long )
		        			{
		        				if ( (Long)attrList.get(attrName) == Long.parseLong(attrValue))
		        				{
		        					//decrement numAttrNotMet by 1
		        					--numAttrNotMet; 				
		        				}
		        			}
		        			//check if attribute value is string
		        			if ( attrList.get(attrName) instanceof java.lang.String )
		        			{
		        				if ( attrList.get(attrName).equals(attrValue))
		        				{
		        					//decrement numAttrNotMet by 1
		        					--numAttrNotMet;				
		        				}
		        			}
		        			//check if attribute value is JSONObject
		        			if ( attrList.get(attrName) instanceof org.json.simple.JSONObject )
		        			{
		        				JSONObject attrSub = (JSONObject) attrList.get(attrName);
		        				String attrValue1 = attrValue.substring(0, attrValue.indexOf('_'));
		        				String attrValue2 = attrValue.substring(attrValue.indexOf('_') + 1, attrValue.length());
		        				if (attrSub.containsKey(attrValue1) && attrSub.get(attrValue1).toString().equals(attrValue2))
		        				{
		        					//decrement numAttrNotMet by 1
		        					--numAttrNotMet;        				
		        				}
		        			}
		        			/*
		        			//if all attributes satisfied, display result
		        			if ( numAttrNotMet == 0 )
		        			{
		        				String[] resultBssn = (String []) nextBssnAttr.getKey();
		        				model.addRow(new Object[]{ resultBssn[0], resultBssn[1], resultBssn[2], resultBssn[3], 2});
		        			}*/
		        			
		        		}
	        			if ( numAttrNotMet == 0 )
	        			{
	        				String[] resultBssn = (String []) nextBssnAttr.getKey();
	        				model.addRow(new Object[]{ resultBssn[0], resultBssn[1], resultBssn[2], resultBssn[3], 2});
	        			}
		        	}
	        	}
	        }
        }
    }
    
    private void jTable1ValueChanged(javax.swing.event.ListSelectionEvent evt) { 
    	if (!evt.getValueIsAdjusting() & (jTable1.getSelectedRow() > -1)) {//This line prevents double events
        	//System.out.println("One row selected.");
    		jPopupMenu1 = new JPopupMenu();
    		jPopupMenu1.setLayout(new BorderLayout());
    		
    		JTable jTable2 = new JTable();
    		jTable2.setModel(new javax.swing.table.DefaultTableModel(
    	            new Object [][] {

    	            },
    	            new String [] {
    	                "Review Date", "Stars", "Text", "Username"
    	            }
    	        ) {
    	            Class[] types = new Class [] {
    	                java.util.Date.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
    	            };

    	            public Class getColumnClass(int columnIndex) {
    	                return types [columnIndex];
    	            }
    	        });
    		TableColumnModel columnModel = jTable2.getColumnModel();
    		columnModel.getColumn(0).setPreferredWidth(200);
    		columnModel.getColumn(1).setPreferredWidth(200);
    		columnModel.getColumn(2).setPreferredWidth(400);
    		columnModel.getColumn(3).setPreferredWidth(200);
    		DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
            //clear table before displaying search results
            model.setRowCount(0);
            //get the business id (hidden from user)
            String selectedBssnId = (String) jTable1.getModel().getValueAt(jTable1.getSelectedRow(),0);
            //model.addRow(new Object[]{ 2, selectedBssnId, "is selected"});
            
			try
        	{
            	Class.forName("oracle.jdbc.OracleDriver");
                Connection myConn = DriverManager.getConnection( connLink, username, password);
    			Statement statement = myConn.createStatement();
				String query = "Select * from reviews r "
					+ "inner join yelp_users u on r.author = u.user_id "
					+ "where r.business_id = '"
					+ selectedBssnId + "' ";
				//System.out.println(query);
				ResultSet resultSet = statement.executeQuery(query);
				while ( resultSet.next() )
				{
					int resultRating = resultSet.getInt("rating");
		    		Blob resultTextBlob = resultSet.getBlob("review_text");
		    		String resultText = new String(resultTextBlob.getBytes(1, (int) resultTextBlob.length()));
					String resultUsername = resultSet.getString("user_name");
					Date resultDate = resultSet.getDate("review_date");
					model.addRow(new Object[]{ resultDate, resultRating, resultText, resultUsername});
				}
			}
			catch (Exception ex) {}
            
    		jPopupMenu1.add(new JScrollPane(jTable2));
    		//Dimension preferredSize = jTable2.getPreferredSize();
  		    //preferredSize.width += 30;
    		//preferredSize.height += 30;
    		//jTable2.setPreferredScrollableViewportSize(preferredSize);
    		//jPopupMenu1.setVisible(true);
			jPopupMenu1.show(jTable1, -550, 0);
    	}
    }
    
    private void day1ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        daySelected = "monday";
    }                                    

    private void day2ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        daySelected = "tuesday";
    }                                    

    private void day3ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        daySelected = "wednesday";
    }
    
    private void day4ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        daySelected = "thursday";
    }
    
    private void day5ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        daySelected = "friday";
    }
    
    private void day6ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        daySelected = "saturday";
    }
    
    private void day7ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        daySelected = "sunday";
    }
    
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {
    	if ( ((String) jComboBox1.getSelectedItem()).equals("Any Attribute") )
    	{
    		attrAnyAll = 1;
    	}
    	else if ( ((String) jComboBox1.getSelectedItem()).equals("All Attributes") )
    	{
    		attrAnyAll = 2;
    	}
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Windows (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.LookAndFeelInfo[] installedLookAndFeels=javax.swing.UIManager.getInstalledLookAndFeels();
            for (int idx=0; idx<installedLookAndFeels.length; idx++)
                if ("Windows".equals(installedLookAndFeels[idx].getName())) {
                    javax.swing.UIManager.setLookAndFeel(installedLookAndFeels[idx].getClassName());
                    break;
                }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(YelpTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(YelpTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(YelpTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(YelpTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new YelpTool().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify                     
    private javax.swing.JCheckBox bct1;
    private javax.swing.JCheckBox bct10;
    private javax.swing.JCheckBox bct11;
    private javax.swing.JCheckBox bct12;
    private javax.swing.JCheckBox bct13;
    private javax.swing.JCheckBox bct14;
    private javax.swing.JCheckBox bct15;
    private javax.swing.JCheckBox bct16;
    private javax.swing.JCheckBox bct17;
    private javax.swing.JCheckBox bct18;
    private javax.swing.JCheckBox bct19;
    private javax.swing.JCheckBox bct2;
    private javax.swing.JCheckBox bct20;
    private javax.swing.JCheckBox bct21;
    private javax.swing.JCheckBox bct22;
    private javax.swing.JCheckBox bct23;
    private javax.swing.JCheckBox bct24;
    private javax.swing.JCheckBox bct25;
    private javax.swing.JCheckBox bct26;
    private javax.swing.JCheckBox bct27;
    private javax.swing.JCheckBox bct28;
    private javax.swing.JCheckBox bct3;
    private javax.swing.JCheckBox bct4;
    private javax.swing.JCheckBox bct5;
    private javax.swing.JCheckBox bct6;
    private javax.swing.JCheckBox bct7;
    private javax.swing.JCheckBox bct8;
    private javax.swing.JCheckBox bct9;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JRadioButton day1;
    private javax.swing.JRadioButton day2;
    private javax.swing.JRadioButton day3;
    private javax.swing.JRadioButton day4;
    private javax.swing.JRadioButton day5;
    private javax.swing.JRadioButton day6;
    private javax.swing.JRadioButton day7;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JComboBox<String> jComboBox1;
    // End of variables declaration                   
    
}
